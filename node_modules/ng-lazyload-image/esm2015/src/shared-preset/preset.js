/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable } from 'rxjs';
import { cssClassNames, hasCssClassName, removeCssClassName, addCssClassName, isImageElement, isChildOfPicture, setSourcesToLazy, setImage, setImageAndSourcesToError, setImageAndSourcesToLazy, setImageAndSourcesToDefault, } from '../util';
const /** @type {?} */ end = ({ element }) => addCssClassName(element, cssClassNames.loaded);
const ɵ0 = end;
export const /** @type {?} */ loadImage = ({ element, useSrcset, imagePath }) => {
    let /** @type {?} */ img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        const /** @type {?} */ parentClone = /** @type {?} */ (element.parentNode.cloneNode(true));
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    return Observable.create(observer => {
        img.onload = () => {
            observer.next(imagePath);
            observer.complete();
        };
        img.onerror = err => {
            observer.error(null);
        };
    });
};
const /** @type {?} */ setErrorImage = ({ element, errorImagePath, useSrcset }) => {
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
const ɵ1 = setErrorImage;
const /** @type {?} */ setLoadedImage = ({ element, imagePath, useSrcset }) => {
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
const ɵ2 = setLoadedImage;
const /** @type {?} */ setup = ({ element, defaultImagePath, useSrcset }) => {
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
const ɵ3 = setup;
export const /** @type {?} */ sharedPreset = {
    finally: end,
    loadImage,
    setErrorImage,
    setLoadedImage,
    setup
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUNMLGFBQWEsRUFDYixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QiwyQkFBMkIsR0FDNUIsTUFBTSxTQUFTLENBQUM7QUFTakIsdUJBQU0sR0FBRyxHQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXZGLE1BQU0sQ0FBQyx1QkFBTSxTQUFTLEdBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7SUFDMUUscUJBQUksR0FBcUIsQ0FBQztJQUMxQixFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELHVCQUFNLFdBQVcscUJBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUF1QixDQUFBLENBQUM7UUFDN0UsR0FBRyxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNyQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDbEIsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN4QjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sR0FBRyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDckI7S0FDRjtJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ2xDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3JCLENBQUM7UUFDRixHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEIsQ0FBQztLQUNILENBQUMsQ0FBQztDQUNKLENBQUM7QUFFRix1QkFBTSxhQUFhLEdBQW9CLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7SUFDaEYseUJBQXlCLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RCxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNoRCxDQUFDOztBQUVGLHVCQUFNLGNBQWMsR0FBcUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtJQUM3RSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQ3pELENBQUM7O0FBRUYsdUJBQU0sS0FBSyxHQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtJQUNsRSwyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEUsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELGtCQUFrQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkQ7Q0FDRixDQUFDOztBQUVGLE1BQU0sQ0FBQyx1QkFBTSxZQUFZLEdBQUc7SUFDMUIsT0FBTyxFQUFFLEdBQUc7SUFDWixTQUFTO0lBQ1QsYUFBYTtJQUNiLGNBQWM7SUFDZCxLQUFLO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNzc0NsYXNzTmFtZXMsXG4gIGhhc0Nzc0NsYXNzTmFtZSxcbiAgcmVtb3ZlQ3NzQ2xhc3NOYW1lLFxuICBhZGRDc3NDbGFzc05hbWUsXG4gIGlzSW1hZ2VFbGVtZW50LFxuICBpc0NoaWxkT2ZQaWN0dXJlLFxuICBzZXRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZSxcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcixcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQsXG59IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtcbiAgRmluYWxseUZuLFxuICBMb2FkSW1hZ2VGbixcbiAgU2V0RXJyb3JJbWFnZUZuLFxuICBTZXRMb2FkZWRJbWFnZUZuLFxuICBTZXR1cEZuXG59IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgZW5kOiBGaW5hbGx5Rm4gPSAoeyBlbGVtZW50IH0pID0+IGFkZENzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG5cbmV4cG9ydCBjb25zdCBsb2FkSW1hZ2U6IExvYWRJbWFnZUZuID0gKHsgZWxlbWVudCwgdXNlU3Jjc2V0LCBpbWFnZVBhdGggfSkgPT4ge1xuICBsZXQgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgaXNDaGlsZE9mUGljdHVyZShlbGVtZW50KSkge1xuICAgIGNvbnN0IHBhcmVudENsb25lID0gZWxlbWVudC5wYXJlbnROb2RlLmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MUGljdHVyZUVsZW1lbnQ7XG4gICAgaW1nID0gcGFyZW50Q2xvbmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpWzBdO1xuICAgIHNldFNvdXJjZXNUb0xhenkoaW1nKTtcbiAgICBzZXRJbWFnZShpbWcsIGltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgZWxlbWVudC5zaXplcykge1xuICAgICAgaW1nLnNpemVzID0gZWxlbWVudC5zaXplcztcbiAgICB9XG4gICAgaWYgKHVzZVNyY3NldCkge1xuICAgICAgaW1nLnNyY3NldCA9IGltYWdlUGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nLnNyYyA9IGltYWdlUGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xuICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KGltYWdlUGF0aCk7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgaW1nLm9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZXJyb3IobnVsbCk7XG4gICAgfTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRFcnJvckltYWdlOiBTZXRFcnJvckltYWdlRm4gPSAoeyBlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0IH0pID0+IHtcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcihlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMuZmFpbGVkKTtcbn07XG5cbmNvbnN0IHNldExvYWRlZEltYWdlOiBTZXRMb2FkZWRJbWFnZUZuID0gKHsgZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenkoZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xufTtcblxuY29uc3Qgc2V0dXA6IFNldHVwRm4gPSAoeyBlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQoZWxlbWVudCwgZGVmYXVsdEltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcblxuICBpZiAoaGFzQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKSkge1xuICAgIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRQcmVzZXQgPSB7XG4gIGZpbmFsbHk6IGVuZCxcbiAgbG9hZEltYWdlLFxuICBzZXRFcnJvckltYWdlLFxuICBzZXRMb2FkZWRJbWFnZSxcbiAgc2V0dXBcbn07XG4iXX0=