/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of } from 'rxjs';
import { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';
/**
 * @template E
 * @param {?} hookSet
 * @param {?} attributes
 * @return {?}
 */
export function lazyLoadImage(hookSet, attributes) {
    return (scrollObservable) => {
        return scrollObservable.pipe(filter(event => hookSet.isVisible({
            element: attributes.element,
            event: event,
            offset: attributes.offset,
            scrollContainer: attributes.scrollContainer
        })), take(1), mergeMap(() => hookSet.loadImage(attributes)), tap(imagePath => hookSet.setLoadedImage({
            element: attributes.element,
            imagePath,
            useSrcset: attributes.useSrcset
        })), map(() => true), catchError(() => {
            hookSet.setErrorImage(attributes);
            return of(false);
        }), tap(() => hookSet.finally(attributes)));
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1sYXp5bG9hZC1pbWFnZS8iLCJzb3VyY2VzIjpbInNyYy9sYXp5bG9hZC1pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQUc5RSxNQUFNLHdCQUEyQixPQUFtQixFQUFFLFVBQXNCO0lBQzFFLE1BQU0sQ0FBQyxDQUFDLGdCQUErQixFQUFFLEVBQUU7UUFDekMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ2IsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNoQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDM0IsS0FBSyxFQUFFLEtBQUs7WUFDWixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07WUFDekIsZUFBZSxFQUFFLFVBQVUsQ0FBQyxlQUFlO1NBQzVDLENBQUMsQ0FDSCxFQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUM3QyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FDZCxPQUFPLENBQUMsY0FBYyxDQUFDO1lBQ3JCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztZQUMzQixTQUFTO1lBQ1QsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO1NBQ2hDLENBQUMsQ0FDSCxFQUNELEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xCLENBQUMsRUFDRixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUN2QyxDQUFDO0tBQ0gsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbHRlciwgbWFwLCBtZXJnZU1hcCwgdGFrZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXR0cmlidXRlcywgSG9va1NldCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGF6eUxvYWRJbWFnZTxFPihob29rU2V0OiBIb29rU2V0PEU+LCBhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzKSB7XG4gIHJldHVybiAoc2Nyb2xsT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxFPikgPT4ge1xuICAgIHJldHVybiBzY3JvbGxPYnNlcnZhYmxlLnBpcGUoXG4gICAgICBmaWx0ZXIoZXZlbnQgPT5cbiAgICAgICAgaG9va1NldC5pc1Zpc2libGUoe1xuICAgICAgICAgIGVsZW1lbnQ6IGF0dHJpYnV0ZXMuZWxlbWVudCxcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgb2Zmc2V0OiBhdHRyaWJ1dGVzLm9mZnNldCxcbiAgICAgICAgICBzY3JvbGxDb250YWluZXI6IGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdGFrZSgxKSxcbiAgICAgIG1lcmdlTWFwKCgpID0+IGhvb2tTZXQubG9hZEltYWdlKGF0dHJpYnV0ZXMpKSxcbiAgICAgIHRhcChpbWFnZVBhdGggPT5cbiAgICAgICAgaG9va1NldC5zZXRMb2FkZWRJbWFnZSh7XG4gICAgICAgICAgZWxlbWVudDogYXR0cmlidXRlcy5lbGVtZW50LFxuICAgICAgICAgIGltYWdlUGF0aCxcbiAgICAgICAgICB1c2VTcmNzZXQ6IGF0dHJpYnV0ZXMudXNlU3Jjc2V0XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgIGhvb2tTZXQuc2V0RXJyb3JJbWFnZShhdHRyaWJ1dGVzKTtcbiAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcbiAgICAgIH0pLFxuICAgICAgdGFwKCgpID0+IGhvb2tTZXQuZmluYWxseShhdHRyaWJ1dGVzKSlcbiAgICApO1xuICB9O1xufVxuIl19