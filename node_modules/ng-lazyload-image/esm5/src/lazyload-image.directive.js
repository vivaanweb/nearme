/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { cretateHooks } from './hooks-factory';
import { lazyLoadImage } from './lazyload-image';
import { isWindowDefined } from './util';
var LazyLoadImageDirective = /** @class */ (function () {
    function LazyLoadImageDirective(el, ngZone, options) {
        this.onLoad = new EventEmitter();
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.hooks = cretateHooks(options);
    }
    /**
     * @return {?}
     */
    LazyLoadImageDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            offset: this.offset | 0,
            scrollContainer: this.scrollTarget,
            scrollObservable: this.scrollObservable
        });
    };
    /**
     * @return {?}
     */
    LazyLoadImageDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Disable lazy load image in server side
        if (!isWindowDefined()) {
            return null;
        }
        this.ngZone.runOutsideAngular(function () {
            _this.scrollSubscription = _this.propertyChanges$.pipe(tap(function (attributes) { return _this.hooks.setup(attributes); }), switchMap(function (attributes) { return _this.hooks.getObservable(attributes).pipe(lazyLoadImage(_this.hooks, attributes)); })).subscribe(function (success) { return _this.onLoad.emit(success); });
        });
    };
    /**
     * @return {?}
     */
    LazyLoadImageDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        [this.scrollSubscription]
            .filter(function (subscription) { return subscription && !subscription.isUnsubscribed; })
            .forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    LazyLoadImageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyLoad]'
                },] }
    ];
    /** @nocollapse */
    LazyLoadImageDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['options',] },] },
    ]; };
    LazyLoadImageDirective.propDecorators = {
        "lazyImage": [{ type: Input, args: ['lazyLoad',] },],
        "defaultImage": [{ type: Input },],
        "errorImage": [{ type: Input },],
        "scrollTarget": [{ type: Input },],
        "scrollObservable": [{ type: Input },],
        "offset": [{ type: Input },],
        "useSrcset": [{ type: Input },],
        "onLoad": [{ type: Output },],
    };
    return LazyLoadImageDirective;
}());
export { LazyLoadImageDirective };
function LazyLoadImageDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    LazyLoadImageDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    LazyLoadImageDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    LazyLoadImageDirective.propDecorators;
    /** @type {?} */
    LazyLoadImageDirective.prototype.lazyImage;
    /** @type {?} */
    LazyLoadImageDirective.prototype.defaultImage;
    /** @type {?} */
    LazyLoadImageDirective.prototype.errorImage;
    /** @type {?} */
    LazyLoadImageDirective.prototype.scrollTarget;
    /** @type {?} */
    LazyLoadImageDirective.prototype.scrollObservable;
    /** @type {?} */
    LazyLoadImageDirective.prototype.offset;
    /** @type {?} */
    LazyLoadImageDirective.prototype.useSrcset;
    /** @type {?} */
    LazyLoadImageDirective.prototype.onLoad;
    /** @type {?} */
    LazyLoadImageDirective.prototype.propertyChanges$;
    /** @type {?} */
    LazyLoadImageDirective.prototype.elementRef;
    /** @type {?} */
    LazyLoadImageDirective.prototype.ngZone;
    /** @type {?} */
    LazyLoadImageDirective.prototype.scrollSubscription;
    /** @type {?} */
    LazyLoadImageDirective.prototype.hooks;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvbGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBR04sUUFBUSxFQUNSLE1BQU0sRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sUUFBUSxDQUFDOztJQW9CdkMsZ0NBQVksRUFBYyxFQUFFLE1BQWMsRUFBaUM7c0JBUGpDLElBQUksWUFBWSxFQUFFO1FBUTFELElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3BDOzs7O0lBRUQsNENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO1lBQ3RDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWTtZQUNuQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDL0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDdkIsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ2xDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCxtREFBa0I7OztJQUFsQjtRQUFBLGlCQVlDOztRQVZDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7WUFDNUIsS0FBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQ2xELEdBQUcsQ0FBQyxVQUFBLFVBQVUsSUFBSSxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUE1QixDQUE0QixDQUFDLEVBQy9DLFNBQVMsQ0FBQyxVQUFBLFVBQVUsSUFBSSxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFoRixDQUFnRixDQUFDLENBQzFHLENBQUMsU0FBUyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQXpCLENBQXlCLENBQUMsQ0FBQztTQUNuRCxDQUFDLENBQUM7S0FDSjs7OztJQUVELDRDQUFXOzs7SUFBWDtRQUNFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2FBQ3RCLE1BQU0sQ0FBQyxVQUFBLFlBQVksSUFBSSxPQUFBLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQTVDLENBQTRDLENBQUM7YUFDcEUsT0FBTyxDQUFDLFVBQUEsWUFBWSxJQUFJLE9BQUEsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUExQixDQUEwQixDQUFDLENBQUM7S0FDeEQ7O2dCQXhERixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFlBQVk7aUJBQ3pCOzs7O2dCQW5CRyxVQUFVO2dCQUlWLE1BQU07Z0RBK0JxQyxRQUFRLFlBQUksTUFBTSxTQUFDLFNBQVM7Ozs4QkFkeEUsS0FBSyxTQUFDLFVBQVU7aUNBQ2hCLEtBQUs7K0JBQ0wsS0FBSztpQ0FDTCxLQUFLO3FDQUNMLEtBQUs7MkJBQ0wsS0FBSzs4QkFDTCxLQUFLOzJCQUNMLE1BQU07O2lDQS9CVDs7U0F1QmEsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgTmdab25lLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBjcmV0YXRlSG9va3MgfSBmcm9tICcuL2hvb2tzLWZhY3RvcnknO1xuaW1wb3J0IHsgbGF6eUxvYWRJbWFnZSB9IGZyb20gJy4vbGF6eWxvYWQtaW1hZ2UnO1xuaW1wb3J0IHsgQXR0cmlidXRlcywgSG9va1NldCwgTW9kdWxlT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgaXNXaW5kb3dEZWZpbmVkIH0gZnJvbSAnLi91dGlsJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbGF6eUxvYWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBMYXp5TG9hZEltYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoJ2xhenlMb2FkJykgbGF6eUltYWdlOyAgIC8vIFRoZSBpbWFnZSB0byBiZSBsYXp5IGxvYWRlZFxuICBASW5wdXQoKSBkZWZhdWx0SW1hZ2U6IHN0cmluZzsgIC8vIFRoZSBpbWFnZSB0byBiZSBkaXNwbGF5ZWQgYmVmb3JlIGxhenlJbWFnZSBpcyBsb2FkZWRcbiAgQElucHV0KCkgZXJyb3JJbWFnZTogc3RyaW5nOyAgICAvLyBUaGUgaW1hZ2UgdG8gYmUgZGlzcGxheWVkIGlmIGxhenlJbWFnZSBsb2FkIGZhaWxzXG4gIEBJbnB1dCgpIHNjcm9sbFRhcmdldDogYW55OyAgICAgLy8gU2Nyb2xsIGNvbnRhaW5lciB0aGF0IGNvbnRhaW5zIHRoZSBpbWFnZSBhbmQgZW1pdHMgc2NvbGwgZXZlbnRzXG4gIEBJbnB1dCgpIHNjcm9sbE9ic2VydmFibGU7ICAgICAgLy8gUGFzcyB5b3VyIG93biBzY3JvbGwgZW1pdHRlclxuICBASW5wdXQoKSBvZmZzZXQ6IG51bWJlcjsgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgcHggYSBpbWFnZSBzaG91bGQgYmUgbG9hZGVkIGJlZm9yZSBpdCBpcyBpbiB2aWV3IHBvcnRcbiAgQElucHV0KCkgdXNlU3Jjc2V0OiBib29sZWFuOyAgICAvLyBXaGV0aGVyIHNyY3NldCBhdHRyaWJ1dGUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiBzcmNcbiAgQE91dHB1dCgpIG9uTG9hZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpOyAvLyBDYWxsYmFjayB3aGVuIGFuIGltYWdlIGlzIGxvYWRlZFxuICBwcml2YXRlIHByb3BlcnR5Q2hhbmdlcyQ6IFJlcGxheVN1YmplY3Q8QXR0cmlidXRlcz47XG4gIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZTtcbiAgcHJpdmF0ZSBzY3JvbGxTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgaG9va3M6IEhvb2tTZXQ8YW55PjtcblxuICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIEBPcHRpb25hbCgpIEBJbmplY3QoJ29wdGlvbnMnKSBvcHRpb25zPzogTW9kdWxlT3B0aW9ucykge1xuICAgIHRoaXMuZWxlbWVudFJlZiA9IGVsO1xuICAgIHRoaXMubmdab25lID0gbmdab25lO1xuICAgIHRoaXMucHJvcGVydHlDaGFuZ2VzJCA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG4gICAgdGhpcy5ob29rcyA9IGNyZXRhdGVIb29rcyhvcHRpb25zKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMucHJvcGVydHlDaGFuZ2VzJC5uZXh0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgaW1hZ2VQYXRoOiB0aGlzLmxhenlJbWFnZSxcbiAgICAgIGRlZmF1bHRJbWFnZVBhdGg6IHRoaXMuZGVmYXVsdEltYWdlLFxuICAgICAgZXJyb3JJbWFnZVBhdGg6IHRoaXMuZXJyb3JJbWFnZSxcbiAgICAgIHVzZVNyY3NldDogdGhpcy51c2VTcmNzZXQsXG4gICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0IHwgMCxcbiAgICAgIHNjcm9sbENvbnRhaW5lcjogdGhpcy5zY3JvbGxUYXJnZXQsXG4gICAgICBzY3JvbGxPYnNlcnZhYmxlOiB0aGlzLnNjcm9sbE9ic2VydmFibGVcbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBEaXNhYmxlIGxhenkgbG9hZCBpbWFnZSBpbiBzZXJ2ZXIgc2lkZVxuICAgIGlmICghaXNXaW5kb3dEZWZpbmVkKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wZXJ0eUNoYW5nZXMkLnBpcGUoXG4gICAgICAgIHRhcChhdHRyaWJ1dGVzID0+IHRoaXMuaG9va3Muc2V0dXAoYXR0cmlidXRlcykpLFxuICAgICAgICBzd2l0Y2hNYXAoYXR0cmlidXRlcyA9PiB0aGlzLmhvb2tzLmdldE9ic2VydmFibGUoYXR0cmlidXRlcykucGlwZShsYXp5TG9hZEltYWdlKHRoaXMuaG9va3MsIGF0dHJpYnV0ZXMpKSlcbiAgICAgICkuc3Vic2NyaWJlKHN1Y2Nlc3MgPT4gdGhpcy5vbkxvYWQuZW1pdChzdWNjZXNzKSk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBbdGhpcy5zY3JvbGxTdWJzY3JpcHRpb25dXG4gICAgICAuZmlsdGVyKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZClcbiAgICAgIC5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==