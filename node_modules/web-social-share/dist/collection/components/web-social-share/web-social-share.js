import { h } from '@stencil/core';
export class WebSocialShare {
    async moveSlotOnLoad(event) {
        if (!event || !event.detail) {
            return;
        }
        await this.moveSlot(event.detail);
    }
    moveSlot(name) {
        return new Promise((resolve) => {
            const slot = this.el.querySelector('[slot=\'' + name + '\']');
            const element = this.el.shadowRoot.querySelector('web-social-share-target.web-social-share-' + name);
            if (element && slot) {
                element.appendChild(slot);
            }
            resolve();
        });
    }
    hide() {
        let element = this.el.shadowRoot.querySelector('div.web-social-share');
        if (element) {
            element.classList.add('web-social-share-transition-close');
            setTimeout(() => {
                // Reflect css animation speed 400ms, see css
                this.show = false;
                element.classList.remove('web-social-share-transition-close');
                this.closed.emit(true);
            }, 200);
        }
        else {
            // Well we don't find the action sheet, we could mark it as not displayed
            this.show = false;
            this.closed.emit(true);
        }
    }
    render() {
        return (h("div", { class: this.show ? 'web-social-share web-social-share-open' : 'web-social-share web-social-share-close' },
            h("div", { class: 'web-social-share-backdrop', onClick: () => this.hide() }),
            h("div", { class: 'web-social-share-action-sheet', onClick: () => this.hide() },
                h("div", { class: 'web-social-share-action-sheet-container' },
                    h("div", { class: 'web-social-share-action-sheet-group' }, this.renderTargets()))),
            h("slot", { name: "facebook" }),
            h("slot", { name: "twitter" }),
            h("slot", { name: "email" }),
            h("slot", { name: "linkedin" }),
            h("slot", { name: "pinterest" }),
            h("slot", { name: "reddit" }),
            h("slot", { name: "whatsapp" }),
            h("slot", { name: "copy" })));
    }
    renderTargets() {
        if (!this.share || !this.share.config) {
            return (h("span", null));
        }
        else {
            return (this.share.config.map((config) => h("web-social-share-target", { displayNames: this.share.displayNames, share: config })));
        }
    }
    static get is() { return "web-social-share"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["web-social-share.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["web-social-share.css"]
    }; }
    static get properties() { return {
        "show": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "show",
            "reflect": false
        },
        "share": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "WebSocialShareInput",
                "resolved": "WebSocialShareInput",
                "references": {
                    "WebSocialShareInput": {
                        "location": "import",
                        "path": "../../types/web-social-share/web-social-share-input"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get events() { return [{
            "method": "closed",
            "name": "closed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "socialShareLoaded",
            "method": "moveSlotOnLoad",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "selected",
            "method": "hide",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
