import * as tslib_1 from "tslib";
/**
 * Created by vadimdez on 28/01/2018.
 */
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
var ImgFallbackDirective = /** @class */ (function () {
    function ImgFallbackDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.loaded = new EventEmitter();
        this.isApplied = false;
        this.ERROR_EVENT_TYPE = 'error';
        this.LOAD_EVENT_TYPE = 'load';
        this.nativeElement = el.nativeElement;
        this.onError = this.onError.bind(this);
        this.onLoad = this.onLoad.bind(this);
        this.addEvents();
    }
    ImgFallbackDirective.prototype.ngOnDestroy = function () {
        this.removeErrorEvent();
        this.removeOnLoadEvent();
    };
    ImgFallbackDirective.prototype.onError = function () {
        if (this.nativeElement.getAttribute('src') !== this.imgSrc) {
            this.isApplied = true;
            this.renderer.setAttribute(this.nativeElement, 'src', this.imgSrc);
        }
        else {
            this.removeOnLoadEvent();
        }
    };
    ImgFallbackDirective.prototype.onLoad = function () {
        this.loaded.emit(this.isApplied);
    };
    ImgFallbackDirective.prototype.removeErrorEvent = function () {
        if (this.cancelOnError) {
            this.cancelOnError();
        }
    };
    ImgFallbackDirective.prototype.removeOnLoadEvent = function () {
        if (this.cancelOnLoad) {
            this.cancelOnLoad();
        }
    };
    ImgFallbackDirective.prototype.addEvents = function () {
        this.cancelOnError = this.renderer.listen(this.nativeElement, this.ERROR_EVENT_TYPE, this.onError);
        this.cancelOnLoad = this.renderer.listen(this.nativeElement, this.LOAD_EVENT_TYPE, this.onLoad);
    };
    tslib_1.__decorate([
        Input('src-fallback'),
        tslib_1.__metadata("design:type", String)
    ], ImgFallbackDirective.prototype, "imgSrc", void 0);
    tslib_1.__decorate([
        Output('loaded'),
        tslib_1.__metadata("design:type", Object)
    ], ImgFallbackDirective.prototype, "loaded", void 0);
    ImgFallbackDirective = tslib_1.__decorate([
        Directive({
            selector: '[src-fallback]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
    ], ImgFallbackDirective);
    return ImgFallbackDirective;
}());
export { ImgFallbackDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy1mYWxsYmFjay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1nLWZhbGxiYWNrLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL25neC1pbWctZmFsbGJhY2svbmd4LWltZy1mYWxsYmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3pHO0lBV0UsOEJBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVI3QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUvQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHFCQUFnQixHQUFXLE9BQU8sQ0FBQztRQUNuQyxvQkFBZSxHQUFXLE1BQU0sQ0FBQztRQUt2QyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFFdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsMENBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxzQ0FBTyxHQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8scUNBQU0sR0FBZDtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sK0NBQWdCLEdBQXhCO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFTyxnREFBaUIsR0FBekI7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUVPLHdDQUFTLEdBQWpCO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFsRHNCO1FBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7O3dEQUFnQjtJQUNwQjtRQUFqQixNQUFNLENBQUMsUUFBUSxDQUFDOzt3REFBc0M7SUFINUMsb0JBQW9CO1FBSGhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxnQkFBZ0I7U0FDM0IsQ0FBQztpREFZd0IsVUFBVSxFQUFvQixTQUFTO09BWHBELG9CQUFvQixDQXFEaEM7SUFBRCwyQkFBQztDQUFBLEFBckRELElBcURDO1NBckRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB2YWRpbWRleiBvbiAyOC8wMS8yMDE4LlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NyYy1mYWxsYmFja10nXG59KVxuZXhwb3J0IGNsYXNzIEltZ0ZhbGxiYWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBASW5wdXQoJ3NyYy1mYWxsYmFjaycpIGltZ1NyYzogc3RyaW5nO1xuICBAT3V0cHV0KCdsb2FkZWQnKSBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIHByaXZhdGUgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgaXNBcHBsaWVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgRVJST1JfRVZFTlRfVFlQRTogc3RyaW5nID0gJ2Vycm9yJztcbiAgcHJpdmF0ZSBMT0FEX0VWRU5UX1RZUEU6IHN0cmluZyA9ICdsb2FkJztcbiAgcHJpdmF0ZSBjYW5jZWxPbkVycm9yOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBjYW5jZWxPbkxvYWQ6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLm9uRXJyb3IgPSB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTG9hZCA9IHRoaXMub25Mb2FkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hZGRFdmVudHMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXJyb3JFdmVudCgpO1xuICAgIHRoaXMucmVtb3ZlT25Mb2FkRXZlbnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FcnJvcigpIHtcbiAgICBpZiAodGhpcy5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJykgIT09IHRoaXMuaW1nU3JjKSB7XG4gICAgICB0aGlzLmlzQXBwbGllZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdzcmMnLCB0aGlzLmltZ1NyYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlT25Mb2FkRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uTG9hZCgpIHtcbiAgICB0aGlzLmxvYWRlZC5lbWl0KHRoaXMuaXNBcHBsaWVkKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRXJyb3JFdmVudCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxPbkVycm9yKSB7XG4gICAgICB0aGlzLmNhbmNlbE9uRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZU9uTG9hZEV2ZW50KCkge1xuICAgIGlmICh0aGlzLmNhbmNlbE9uTG9hZCkge1xuICAgICAgdGhpcy5jYW5jZWxPbkxvYWQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZEV2ZW50cygpIHtcbiAgICB0aGlzLmNhbmNlbE9uRXJyb3IgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLm5hdGl2ZUVsZW1lbnQsIHRoaXMuRVJST1JfRVZFTlRfVFlQRSwgdGhpcy5vbkVycm9yKTtcbiAgICB0aGlzLmNhbmNlbE9uTG9hZCA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMubmF0aXZlRWxlbWVudCwgdGhpcy5MT0FEX0VWRU5UX1RZUEUsIHRoaXMub25Mb2FkKTtcbiAgfVxufVxuIl19