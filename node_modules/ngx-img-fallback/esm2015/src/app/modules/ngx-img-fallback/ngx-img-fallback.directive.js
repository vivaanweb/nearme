import * as tslib_1 from "tslib";
/**
 * Created by vadimdez on 28/01/2018.
 */
import { Directive, ElementRef, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
let ImgFallbackDirective = class ImgFallbackDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.loaded = new EventEmitter();
        this.isApplied = false;
        this.ERROR_EVENT_TYPE = 'error';
        this.LOAD_EVENT_TYPE = 'load';
        this.nativeElement = el.nativeElement;
        this.onError = this.onError.bind(this);
        this.onLoad = this.onLoad.bind(this);
        this.addEvents();
    }
    ngOnDestroy() {
        this.removeErrorEvent();
        this.removeOnLoadEvent();
    }
    onError() {
        if (this.nativeElement.getAttribute('src') !== this.imgSrc) {
            this.isApplied = true;
            this.renderer.setAttribute(this.nativeElement, 'src', this.imgSrc);
        }
        else {
            this.removeOnLoadEvent();
        }
    }
    onLoad() {
        this.loaded.emit(this.isApplied);
    }
    removeErrorEvent() {
        if (this.cancelOnError) {
            this.cancelOnError();
        }
    }
    removeOnLoadEvent() {
        if (this.cancelOnLoad) {
            this.cancelOnLoad();
        }
    }
    addEvents() {
        this.cancelOnError = this.renderer.listen(this.nativeElement, this.ERROR_EVENT_TYPE, this.onError);
        this.cancelOnLoad = this.renderer.listen(this.nativeElement, this.LOAD_EVENT_TYPE, this.onLoad);
    }
};
tslib_1.__decorate([
    Input('src-fallback'),
    tslib_1.__metadata("design:type", String)
], ImgFallbackDirective.prototype, "imgSrc", void 0);
tslib_1.__decorate([
    Output('loaded'),
    tslib_1.__metadata("design:type", Object)
], ImgFallbackDirective.prototype, "loaded", void 0);
ImgFallbackDirective = tslib_1.__decorate([
    Directive({
        selector: '[src-fallback]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], ImgFallbackDirective);
export { ImgFallbackDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy1mYWxsYmFjay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1nLWZhbGxiYWNrLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL25neC1pbWctZmFsbGJhY2svbmd4LWltZy1mYWxsYmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3pHLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBVy9CLFlBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVI3QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUvQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHFCQUFnQixHQUFXLE9BQU8sQ0FBQztRQUNuQyxvQkFBZSxHQUFXLE1BQU0sQ0FBQztRQUt2QyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFFdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxPQUFPO1FBQ2IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRU8sU0FBUztRQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0YsQ0FBQTtBQW5Ed0I7SUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7b0RBQWdCO0FBQ3BCO0lBQWpCLE1BQU0sQ0FBQyxRQUFRLENBQUM7O29EQUFzQztBQUg1QyxvQkFBb0I7SUFIaEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtLQUMzQixDQUFDOzZDQVl3QixVQUFVLEVBQW9CLFNBQVM7R0FYcEQsb0JBQW9CLENBcURoQztTQXJEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdmFkaW1kZXogb24gMjgvMDEvMjAxOC5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzcmMtZmFsbGJhY2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBJbWdGYWxsYmFja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCdzcmMtZmFsbGJhY2snKSBpbWdTcmM6IHN0cmluZztcbiAgQE91dHB1dCgnbG9hZGVkJykgbG9hZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBwcml2YXRlIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGlzQXBwbGllZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIEVSUk9SX0VWRU5UX1RZUEU6IHN0cmluZyA9ICdlcnJvcic7XG4gIHByaXZhdGUgTE9BRF9FVkVOVF9UWVBFOiBzdHJpbmcgPSAnbG9hZCc7XG4gIHByaXZhdGUgY2FuY2VsT25FcnJvcjogRnVuY3Rpb247XG4gIHByaXZhdGUgY2FuY2VsT25Mb2FkOiBGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQgPSBlbC5uYXRpdmVFbGVtZW50O1xuXG4gICAgdGhpcy5vbkVycm9yID0gdGhpcy5vbkVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkxvYWQgPSB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWRkRXZlbnRzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUVycm9yRXZlbnQoKTtcbiAgICB0aGlzLnJlbW92ZU9uTG9hZEV2ZW50KCk7XG4gIH1cblxuICBwcml2YXRlIG9uRXJyb3IoKSB7XG4gICAgaWYgKHRoaXMubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpICE9PSB0aGlzLmltZ1NyYykge1xuICAgICAgdGhpcy5pc0FwcGxpZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnc3JjJywgdGhpcy5pbWdTcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZU9uTG9hZEV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvbkxvYWQoKSB7XG4gICAgdGhpcy5sb2FkZWQuZW1pdCh0aGlzLmlzQXBwbGllZCk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUVycm9yRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMuY2FuY2VsT25FcnJvcikge1xuICAgICAgdGhpcy5jYW5jZWxPbkVycm9yKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVPbkxvYWRFdmVudCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxPbkxvYWQpIHtcbiAgICAgIHRoaXMuY2FuY2VsT25Mb2FkKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRFdmVudHMoKSB7XG4gICAgdGhpcy5jYW5jZWxPbkVycm9yID0gdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5uYXRpdmVFbGVtZW50LCB0aGlzLkVSUk9SX0VWRU5UX1RZUEUsIHRoaXMub25FcnJvcik7XG4gICAgdGhpcy5jYW5jZWxPbkxvYWQgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLm5hdGl2ZUVsZW1lbnQsIHRoaXMuTE9BRF9FVkVOVF9UWVBFLCB0aGlzLm9uTG9hZCk7XG4gIH1cbn1cbiJdfQ==